function [modelos] = regmodelpermutef(cfgs,analysis_type,trls,covariates,interact,bsl,reref,npermute,coding)

% TODO: latency
% covariates cell including in columns each covariate as a cell, and nside
% every cell the respective session, rows are for the different variables
% specified in vars (which cut the data)
keep          = 'yes';
load(cfgs{1}.chanfile)
% here we create the permutation distribution 1000
% first entry of trlp third dimension is the actual data
trlp           = permute_trialsbysession(trls,npermute);
  
for p = 1:npermute
     cova1                = struct('values',repmat({[]},1,size(covariates,2)));
       
    for vars = 1:size(trlp,1)
        [ERPall,toelim]     = getERPsfromtrl(cfgs,trlp(vars,:,p),bsl,reref,analysis_type,keep);
        nT(vars)            = size(ERPall.(analysis_type).trial,1);
        tiempo              = ERPall.(analysis_type).time;
        if vars ==1
            Y                   = ERPall.(analysis_type).trial;
        else
            Y                    = cat(1,Y,ERPall.(analysis_type).trial); 
        end
        switch coding
            case('dummy') 
              if vars ==1
                categ               = ones(size(Y,1),1);
              elseif vars < size(trlp,1)
                categ               = [[categ;zeros(nT(vars),size(categ,2))],[zeros(size(categ,1),1);ones(nT(vars),1)]];  
              else
                categ               = [categ;zeros(nT(vars),size(categ,2))];
              end
            case('effect')
               if vars ==1
                categ               = ones(size(Y,1),1);
              elseif vars < size(trlp,1)
                categ               = [[categ;zeros(nT(vars),size(categ,2))],[zeros(size(categ,1),1);ones(nT(vars),1)]];  
              else
                categ               = [categ;-1*ones(nT(vars),size(categ,2))];
              end
        end
        if ~isempty(covariates)
            for c = 1:size(covariates,2) % covariates
                for ip = 1:size(trls,2) % sessions
                    cova1(c).values = [cova1(c).values;covariates{vars,c}{ip}(setdiff(1:length(covariates{vars,c}{ip}),toelim{ip}))'];
                end
            end
        end
    end
    clear ERPall
%              
  
   if p>1
    fprintf ('Permutation %d/%d %4.2f s \r', p,npermute,toc)
   end
   tic
   %here compute the models for all channels time points    
   if ~isempty(covariates)
    cova1 = [cova1.values];
   end
  for model = 1
        if model==1 
            if ~isempty(covariates)
              XY               = [categ,cova1]; % model only with side (regstats add by default a constant teerm)
            else
              XY = [categ];
            end
            if ~isempty(interact)
                for iua = 1:size(interact,1)
                XY = [XY,XY(:,interact(iua,1)).*XY(:,interact(iua,2))];
                end
            end
        end
        [B,Bt,STATS,T] = regntcfe(Y,XY,p,coding,elec,npermute>1);
         if p==1  % this is the correct grouping
            modelos(model).B            = B;
            modelos(model).Bt           = Bt;
            modelos(model).STATS        = STATS;
             modelos(model).TCFE         = T;
             modelos(model).n           = nT;
             modelos(model).time        = tiempo;
        else
             for b = 1:size(modelos(model).Bt,2)
                 modelos(model).MAXTCFEDIST(p-1,b) = max(max(abs(T(:,:,b))));
             end
         end

    end
end

if p>1
    modelos = sigclusthresh(modelos,elec,alfa)
end
% [ch,betas,times,subjects] = size(modelos.B);
% if p >1
%     % clusters
%     alfa = .05;
%     
% 
%     thresholds = prctile(modelos(model).MAXTCFEDIST,100*(1-alfa)); % TODO: Check this 
%     for b = 1:size(modelos(model).Bt,2)
%       
%         modelos(model).pval(:,:,b) = squeeze(sum((abs(permute(repmat(squeeze(modelos(model).TCFE(:,:,b)),[1 1 size(modelos(model).MAXTCFEDIST,1)]),[3 1 2]))-repmat(modelos(model).MAXTCFEDIST(:,b),[1 ch times]))<0,1))/size(modelos(model).MAXTCFEDIST,1);
% 
%         posclus = findclus(squeeze(modelos(model).TCFE(:,:,b))'>thresholds(b),elec.channeighbstructmat,'id'); % cluster TCFE values above threshold
%         modelos(model).TCFEstat(b).time = tiempo;
%         if find(posclus(:)>0)
%             modelos(model).TCFEstat(b).posclusterslabelmat = posclus;
%             for ei = [unique(modelos(model).TCFEstat(b).posclusterslabelmat)]'
%                 if ei>0
%                 modelos(model).TCFEstat(b).posclusters(ei).prob = .001; % this need to be fixed 
%                 end
%             end
%         else
%             modelos(model).TCFEstat(b).posclusterslabelmat = [];
%             modelos(model).TCFEstat(b).posclusters = []; 
%         end
%         negclus = findclus(squeeze(modelos(model).TCFE(:,:,b))'<-thresholds(b),elec.channeighbstructmat,'id'); % cluster TCFE values above threshold
%         if find(negclus(:)>0)
%             modelos(model).TCFEstat(b).negclusterslabelmat = negclus;
%             for ei = unique(modelos(model).TCFEstat(b).negclusterslabelmat)'
%                 if ei>0
%                 modelos(model).TCFEstat(b).negclusters(ei).prob = .001; % this need to be fixed 
%                 end
%             end
%         else
%             modelos(model).TCFEstat(b).negclusters = []; 
%             modelos(model).TCFEstat(b).negclusterslabelmat = [];
%         end
%     end
% end
% %         
%         
%  